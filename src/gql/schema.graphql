# Exposes a URL that specifies the behavior of this scalar.
directive @specifiedBy(
	# The URL that specifies the behavior of this scalar.
	url: String!
) on SCALAR
type ApiToken implements Node {
	displayToken: String!
	id: ID!
	name: String!
	teamId: String
}

input ApiTokenCreateInput {
	name: String!
	teamId: String
}

enum Builder {
	HEROKU
	NIXPACKS
	PAKETO
}

type CnameCheck {
	link: String
	message: String!
	status: CnameCheckStatus!
}

enum CnameCheckStatus {
	ERROR
	INFO
	INVALID
	VALID
	WAITING
}

input ConfigureSharedVariableInput {
	disabledServiceIds: [String!]!
	enabledServiceIds: [String!]!
	environmentId: String!
	name: String!
	projectId: String!
}

type CustomDomain implements Node {
	cnameCheck: CnameCheck!
	createdAt: DateTime!
	deletedAt: DateTime
	domain: String!
	environmentId: String!
	id: ID!
	serviceId: String
	updatedAt: DateTime!
}

input CustomDomainCreateInput {
	domain: String!
	environmentId: String!
	serviceId: String!
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
# 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

type Deployment implements Node {
	canRollback: Boolean!
	createdAt: DateTime!
	environmentId: String!
	id: ID!
	meta: DeploymentMeta
	projectId: String!
	serviceId: String
	staticUrl: String
	status: DeploymentStatus!
	suggestAddServiceDomain: Boolean!
	url: String
}

scalar DeploymentMeta

enum DeploymentStatus {
	BUILDING
	CRASHED
	DEPLOYING
	FAILED
	INITIALIZING
	REMOVED
	REMOVING
	SKIPPED
	SUCCESS
	WAITING
}

type DeploymentTrigger implements Node {
	baseEnvironmentOverrideId: String
	branch: String!
	checkSuites: Boolean!
	environmentId: String!
	id: ID!
	projectId: String!
	provider: String!
	repository: String!
	serviceId: String
	validCheckSuites: Int!
}

input DeploymentTriggerUpdateInput {
	branch: String
	checkSuites: Boolean
	repository: String
	rootDirectory: String
}

type Environment implements Node {
	createdAt: DateTime!
	customDomains(
		after: String
		before: String
		first: Int
		last: Int
	): EnvironmentCustomDomainsConnection!
	deletedAt: DateTime
	deploymentTriggers(
		after: String
		before: String
		first: Int
		last: Int
	): EnvironmentDeploymentTriggersConnection!
	deployments(
		after: String
		before: String
		first: Int
		last: Int
	): EnvironmentDeploymentsConnection!
	id: ID!
	isEphemeral: Boolean!
	meta: EnvironmentMeta
	name: String!
	projectId: String!
	serviceInstances(
		after: String
		before: String
		first: Int
		last: Int
	): EnvironmentServiceInstancesConnection!
	updatedAt: DateTime!
	variables(
		after: String
		before: String
		first: Int
		last: Int
	): EnvironmentVariablesConnection!
}

input EnvironmentCreateInput {
	name: String!
	projectId: String!
}

type EnvironmentCustomDomainsConnection {
	edges: [EnvironmentCustomDomainsConnectionEdge!]!
	pageInfo: PageInfo!
}

type EnvironmentCustomDomainsConnectionEdge {
	cursor: String!
	node: CustomDomain!
}

type EnvironmentDeploymentsConnection {
	edges: [EnvironmentDeploymentsConnectionEdge!]!
	pageInfo: PageInfo!
}

type EnvironmentDeploymentsConnectionEdge {
	cursor: String!
	node: Deployment!
}

type EnvironmentDeploymentTriggersConnection {
	edges: [EnvironmentDeploymentTriggersConnectionEdge!]!
	pageInfo: PageInfo!
}

type EnvironmentDeploymentTriggersConnectionEdge {
	cursor: String!
	node: DeploymentTrigger!
}

type EnvironmentMeta {
	baseBranch: String
	branch: String
	prNumber: Int
	prRepo: String
	prTitle: String
}

type EnvironmentServiceInstancesConnection {
	edges: [EnvironmentServiceInstancesConnectionEdge!]!
	pageInfo: PageInfo!
}

type EnvironmentServiceInstancesConnectionEdge {
	cursor: String!
	node: ServiceInstance!
}

type EnvironmentVariablesConnection {
	edges: [EnvironmentVariablesConnectionEdge!]!
	pageInfo: PageInfo!
}

type EnvironmentVariablesConnectionEdge {
	cursor: String!
	node: Variable!
}

type Event implements Node {
	action: String!
	createdAt: DateTime!
	environment: Environment
	environmentId: String
	id: ID!
	object: String!
	payload: JSON
	project: Project!
	projectId: String!
}

input JobApplicationCreateInput {
	email: String!
	jobId: String!
	name: String!
	resume: Upload!
	why: String!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Metric {
	ts: Int!
	value: Float!
}

enum MetricMeasurement {
	CPU_USAGE
	MEASUREMENT_UNSPECIFIED
	MEMORY_USAGE_GB
	NETWORK_RX_GB
	NETWORK_TX_GB
	UNRECOGNIZED
}

type MetricsResult {
	measurement: MetricMeasurement!
	values: [Metric!]!
}

type Mutation {
	# Creates a new API token.
	apiTokenCreate(input: ApiTokenCreateInput!): String!
	# Deletes an API token.
	apiTokenDelete(id: String!): Boolean!
	configureSharedVariable(input: ConfigureSharedVariableInput!): Variable!
	# Creates a new custom domain.
	customDomainCreate(input: CustomDomainCreateInput!): CustomDomain!
	# Deletes a custom domain.
	customDomainDelete(id: String!): Boolean!
	# Cancels a deployment.
	deploymentCancel(id: String!): Boolean!
	# Redeploys a deployment.
	deploymentRedeploy(id: String!): Deployment!
	# Removes a deployment.
	deploymentRemove(id: String!): Boolean!
	# Restarts a deployment.
	deploymentRestart(id: String!): Boolean!
	# Rolls back to a deployment.
	deploymentRollback(id: String!): Boolean!
	deploymentTriggerUpdate(
		id: String!
		input: DeploymentTriggerUpdateInput!
	): DeploymentTrigger!
	# Creates a new environment.
	environmentCreate(input: EnvironmentCreateInput!): Environment!
	# Deletes an environment.
	environmentDelete(id: String!): Boolean!
	# Creates a new job application.
	jobApplicationCreate(input: JobApplicationCreateInput!): Boolean!
	# Creates a new plugin.
	pluginCreate(input: PluginCreateInput!): Plugin!
	# Deletes a plugin.
	pluginDelete(id: String!): Boolean!
	# Restarts a plugin.
	pluginRestart(id: String!, input: PluginRestartInput!): Plugin!
	# Updates an existing plugin.
	pluginUpdate(id: String!, input: PluginUpdateInput!): Plugin!
	preferencesUpdate(input: PreferencesUpdateData!): Preferences!
	# Claims a project.
	projectClaim(id: String!): Project!
	# Creates a new project.
	projectCreate(input: ProjectCreateInput!): Project!
	# Deletes a project.
	projectDelete(id: String!): Boolean!
	# Updates a project.
	projectUpdate(id: String!, input: ProjectUpdateInput!): Project!
	# Updates the ReferralInfo for the authenticated user.
	referralInfoUpdate(input: ReferralInfoUpdateInput!): ReferralInfo!
	# Creates a new service.
	serviceCreate(input: ServiceCreateInput!): Service!
	# Deletes a service.
	serviceDelete(id: String!): Boolean!
	# Creates a new service domain.
	serviceDomainCreate(input: ServiceDomainCreateInput!): ServiceDomain!
	# Deletes a service domain.
	serviceDomainDelete(id: String!): Boolean!
	# Updates a service domain.
	serviceDomainUpdate(input: ServiceDomainUpdateInput!): Boolean!
	# Update a service instance
	serviceInstanceUpdate(
		input: ServiceInstanceUpdateInput!
		serviceId: String!
	): Boolean!
	# Updates a service.
	serviceUpdate(id: String!, input: ServiceUpdateInput!): Service!
	# Bans a team.
	teamBan(id: String!, input: TeamBanInput!): Boolean!
	# Stops all deployments and plugins for a team.
	teamResourcesStop(id: String!, input: TeamResourcesStopInput): Boolean!
	# Unbans a team.
	teamUnban(id: String!): Boolean!
	# Creates a template.
	templateCreate(input: TemplateCreateInput!): Template!
	# Deletes a template.
	templateDelete(id: String!): Boolean!
	# Deploys a template.
	templateDeploy(input: TemplateDeployInput!): TemplateDeployPayload!
	# Updates a template.
	templateUpdate(id: String!, input: TemplateUpdateInput!): Template!
	# Set flags on the authenticated user.
	userFlagsSet(input: UserFlagsSetInput!): Boolean!
	# Upserts a collection of variables.
	variableCollectionUpsert(input: VariableCollectionUpsertInput!): Boolean!
	# Deletes a variable.
	variableDelete(input: VariableDeleteInput!): Boolean!
	# Upserts a variable.
	variableUpsert(input: VariableUpsertInput!): Boolean!
}

interface Node {
	id: ID!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type Plugin implements Node {
	createdAt: DateTime!
	deletedAt: DateTime
	friendlyName: String!
	id: ID!
	logsEnabled: Boolean!
	name: PluginType!
	project: Project!
	status: PluginStatus!
	variables(
		after: String
		before: String
		first: Int
		last: Int
	): PluginVariablesConnection!
}

input PluginCreateInput {
	name: String!
	projectId: String!
}

input PluginRestartInput {
	environmentId: String!
}

enum PluginStatus {
	LOCKED
	REMOVED
	RUNNING
	STOPPED
}

enum PluginType {
	env
	mongodb
	mysql
	postgresql
	redis
}

input PluginUpdateInput {
	friendlyName: String!
}

type PluginVariablesConnection {
	edges: [PluginVariablesConnectionEdge!]!
	pageInfo: PageInfo!
}

type PluginVariablesConnectionEdge {
	cursor: String!
	node: Variable!
}

type Preferences implements Node {
	buildFailedEmail: Boolean!
	changelogEmail: Boolean!
	deployCrashedEmail: Boolean!
	id: ID!
	marketingEmail: Boolean!
	usageEmail: Boolean!
}

input PreferencesUpdateData {
	buildFailedEmail: Boolean
	changelogEmail: Boolean
	deployCrashedEmail: Boolean
	marketingEmail: Boolean
	token: String
	usageEmail: Boolean
}

type Project implements Node {
	createdAt: DateTime!
	deletedAt: DateTime
	deploymentTriggers(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectDeploymentTriggersConnection!
	deployments(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectDeploymentsConnection!
	description: String
	environments(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectEnvironmentsConnection!
	expiredAt: DateTime
	id: ID!
	isPublic: Boolean!
	isTempProject: Boolean!
	isUpdatable: Boolean!
	members: [ProjectMember!]!
	name: String!
	plugins(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectPluginsConnection!
	prDeploys: Boolean!
	projectPermissions(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectProjectPermissionsConnection!
	services(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectServicesConnection!
	team: Team
	teamId: String
	updatedAt: DateTime!
	upstreamUrl: String
	webhooks(
		after: String
		before: String
		first: Int
		last: Int
	): ProjectWebhooksConnection!
}

input ProjectCreateInput {
	description: String
	isPublic: Boolean
	name: String
	plugins: [String!]
	prDeploys: Boolean
	repo: ProjectCreateRepo
	teamId: String
}

input ProjectCreateRepo {
	branch: String!
	fullRepoName: String!
}

type ProjectDeploymentsConnection {
	edges: [ProjectDeploymentsConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectDeploymentsConnectionEdge {
	cursor: String!
	node: Deployment!
}

type ProjectDeploymentTriggersConnection {
	edges: [ProjectDeploymentTriggersConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectDeploymentTriggersConnectionEdge {
	cursor: String!
	node: DeploymentTrigger!
}

type ProjectEnvironmentsConnection {
	edges: [ProjectEnvironmentsConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectEnvironmentsConnectionEdge {
	cursor: String!
	node: Environment!
}

type ProjectMember {
	avatar: String
	email: String!
	id: String!
	name: String
	role: ProjectRole!
}

type ProjectPermission implements Node {
	id: ID!
	projectId: String!
	role: ProjectRole!
	userId: String!
}

type ProjectPluginsConnection {
	edges: [ProjectPluginsConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectPluginsConnectionEdge {
	cursor: String!
	node: Plugin!
}

type ProjectProjectPermissionsConnection {
	edges: [ProjectProjectPermissionsConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectProjectPermissionsConnectionEdge {
	cursor: String!
	node: ProjectPermission!
}

enum ProjectRole {
	ADMIN
	MEMBER
	VIEWER
}

type ProjectServicesConnection {
	edges: [ProjectServicesConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectServicesConnectionEdge {
	cursor: String!
	node: Service!
}

input ProjectUpdateInput {
	description: String
	isPublic: Boolean
	name: String
	prDeploys: Boolean
}

type ProjectWebhook implements Node {
	id: ID!
	projectId: String!
	url: String!
}

type ProjectWebhooksConnection {
	edges: [ProjectWebhooksConnectionEdge!]!
	pageInfo: PageInfo!
}

type ProjectWebhooksConnectionEdge {
	cursor: String!
	node: ProjectWebhook!
}

type PublicStats {
	totalDeployments: Int!
	totalProjects: Int!
	totalUsers: Int!
}

type Query {
	apiTokens(
		after: String
		before: String
		first: Int
		last: Int
	): QueryApiTokensConnection!
	changelogBlockImage(id: String!): String!
	# Gets a deployment by ID.
	deployment(id: String!): Deployment!
	# All deployment triggers.
	deploymentTriggers(
		after: String
		before: String
		environmentId: String!
		first: Int
		last: Int
		projectId: String!
		serviceId: String!
	): QueryDeploymentTriggersConnection!
	events(
		after: String
		before: String
		environmentId: String
		first: Int
		last: Int
		projectId: String!
	): QueryEventsConnection!
	# Get metrics for a project, environment, and service
	metrics(
		averagingWindowSeconds: Int
		endDate: DateTime
		environmentId: String!
		measurements: [MetricMeasurement!]!
		pluginId: String
		sampleRateSeconds: Int
		serviceId: String
		startDate: DateTime!
	): [MetricsResult!]!
	node(id: ID!): Node
	nodes(ids: [ID!]!): [Node]!
	preferences(token: String): Preferences!
	project(id: String!): Project!
	projects(
		after: String
		before: String
		first: Int
		last: Int
		teamId: String
	): QueryProjectsConnection!
	# Get public Railway stats. Primarily used for the landing page.
	publicStats: PublicStats!
	referralInfo: ReferralInfo!
	template(code: String, owner: String, repo: String): Template!
	# Gets the README for a template.
	templateReadme(code: String!): TemplateReadme!
	templates(
		after: String
		before: String
		first: Int
		last: Int
	): QueryTemplatesConnection!
	userTemplates(
		after: String
		before: String
		first: Int
		last: Int
	): QueryUserTemplatesConnection!
	# All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	variables(
		environmentId: String!
		# Provide a pluginId to get all variables for a specific plugin.
		pluginId: String
		projectId: String!
		# Provide a serviceId to get all variables for a specific service.
		serviceId: String
		unrendered: Boolean
	): ServiceVariables!
}

type QueryApiTokensConnection {
	edges: [QueryApiTokensConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryApiTokensConnectionEdge {
	cursor: String!
	node: ApiToken!
}

type QueryDeploymentTriggersConnection {
	edges: [QueryDeploymentTriggersConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryDeploymentTriggersConnectionEdge {
	cursor: String!
	node: DeploymentTrigger!
}

type QueryEventsConnection {
	edges: [QueryEventsConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryEventsConnectionEdge {
	cursor: String!
	node: Event!
}

type QueryProjectsConnection {
	edges: [QueryProjectsConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryProjectsConnectionEdge {
	cursor: String!
	node: Project!
}

type QueryTemplatesConnection {
	edges: [QueryTemplatesConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryTemplatesConnectionEdge {
	cursor: String!
	node: Template!
}

type QueryUserTemplatesConnection {
	edges: [QueryUserTemplatesConnectionEdge!]!
	pageInfo: PageInfo!
}

type QueryUserTemplatesConnectionEdge {
	cursor: String!
	node: Template!
}

type ReferralInfo implements Node {
	code: String!
	id: ID!
	referralStats: ReferralStats!
	status: String!
}

input ReferralInfoUpdateInput {
	code: String!
}

type ReferralStats {
	credited: Int!
	pending: Int!
}

enum RestartPolicyType {
	ALWAYS
	NEVER
	ON_FAILURE
}

type Service implements Node {
	createdAt: DateTime!
	deletedAt: DateTime
	deployments(
		after: String
		before: String
		first: Int
		last: Int
	): ServiceDeploymentsConnection!
	icon: String
	id: ID!
	name: String!
	project: Project!
	projectId: String!
	repoTriggers(
		after: String
		before: String
		first: Int
		last: Int
	): ServiceRepoTriggersConnection!
	serviceInstances(
		after: String
		before: String
		first: Int
		last: Int
	): ServiceServiceInstancesConnection!
	updatedAt: DateTime!
}

input ServiceCreateInput {
	branch: String
	name: String
	projectId: String!
	source: ServiceSourceInput
	variables: ServiceVariables
}

type ServiceDeploymentsConnection {
	edges: [ServiceDeploymentsConnectionEdge!]!
	pageInfo: PageInfo!
}

type ServiceDeploymentsConnectionEdge {
	cursor: String!
	node: Deployment!
}

type ServiceDomain implements Node {
	domain: String!
	environmentId: String!
	id: ID!
}

input ServiceDomainCreateInput {
	environmentId: String!
	serviceId: String!
}

input ServiceDomainUpdateInput {
	domain: String!
	environmentId: String!
	serviceId: String!
}

type ServiceInstance implements Node {
	buildCommand: String
	builder: Builder!
	createdAt: DateTime!
	deletedAt: DateTime
	environmentId: String!
	healthcheckPath: String
	healthcheckTimeout: Int
	id: ID!
	isUpdatable: Boolean!
	nixpacksPlan: JSON
	railwayConfigFile: String
	restartPolicyMaxRetries: Int!
	restartPolicyType: RestartPolicyType!
	rootDirectory: String
	serviceId: String!
	source: ServiceSource
	startCommand: String
	updatedAt: DateTime!
	upstreamUrl: String
	watchPatterns: [String!]!
}

input ServiceInstanceUpdateInput {
	buildCommand: String
	builder: Builder
	healthcheckPath: String
	healthcheckTimeout: Int
	nixpacksPlan: JSON
	railwayConfigFile: String
	restartPolicyMaxRetries: Int
	restartPolicyType: RestartPolicyType
	rootDirectory: String
	source: ServiceSourceInput
	startCommand: String
	watchPatterns: [String!]
}

type ServiceRepoTriggersConnection {
	edges: [ServiceRepoTriggersConnectionEdge!]!
	pageInfo: PageInfo!
}

type ServiceRepoTriggersConnectionEdge {
	cursor: String!
	node: DeploymentTrigger!
}

type ServiceServiceInstancesConnection {
	edges: [ServiceServiceInstancesConnectionEdge!]!
	pageInfo: PageInfo!
}

type ServiceServiceInstancesConnectionEdge {
	cursor: String!
	node: ServiceInstance!
}

type ServiceSource {
	repo: String
	template: TemplateServiceSource
}

input ServiceSourceInput {
	repo: String!
}

input ServiceUpdateInput {
	icon: String
	name: String
}

# The ServiceVariables scalar type represents values as the TypeScript type:
# Record<string, string>. Example: "{ foo: 'bar', baz: 'qux' }"

scalar ServiceVariables

type Team implements Node {
	avatar: String
	id: ID!
	name: String!
}

input TeamBanInput {
	banReason: String!
}

input TeamResourcesStopInput {
	reason: String!
}

type Template implements Node {
	code: String!
	config: TemplateConfig!
	createdAt: DateTime!
	demoProjectId: String
	id: ID!
	metadata: TemplateMetadata!
	projects: Int!
	services(
		after: String
		before: String
		first: Int
		last: Int
	): TemplateServicesConnection!
	userId: String
}

scalar TemplateConfig

input TemplateCreateInput {
	config: TemplateConfig!
	demoProjectId: String
	metadata: TemplateMetadata!
	services: [TemplateServiceCreateInput!]!
}

input TemplateDeployInput {
	plugins: [String!]
	projectId: String
	services: [TemplateDeployService!]!
	teamId: String
	templateCode: String
}

type TemplateDeployPayload {
	projectId: String!
	workflowId: String!
}

input TemplateDeployService {
	commit: String
	hasDomain: Boolean
	healthcheckPath: String
	id: String
	isPrivate: Boolean
	name: String!
	owner: String!
	rootDirectory: String
	serviceName: String!
	startCommand: String
	template: String!
	variables: ServiceVariables
}

scalar TemplateMetadata

type TemplateReadme {
	description: String
	name: String!
	readmeContent: String!
}

type TemplateService implements Node {
	config: TemplateServiceConfig!
	createdAt: DateTime!
	id: ID!
	templateId: String!
	updatedAt: DateTime!
}

scalar TemplateServiceConfig

input TemplateServiceCreateInput {
	config: TemplateServiceConfig!
}

type TemplateServicesConnection {
	edges: [TemplateServicesConnectionEdge!]!
	pageInfo: PageInfo!
}

type TemplateServicesConnectionEdge {
	cursor: String!
	node: TemplateService!
}

type TemplateServiceSource {
	serviceName: String!
	serviceSource: String!
}

input TemplateServiceUpdateInput {
	config: TemplateServiceConfig!
	id: String
}

input TemplateUpdateInput {
	config: TemplateConfig!
	demoProjectId: String
	metadata: TemplateMetadata!
	services: [TemplateServiceUpdateInput!]!
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type User implements Node {
	email: String!
	id: ID!
	name: String
}

enum UserFlag {
	API_PREVIEW
	BETA
}

input UserFlagsSetInput {
	flags: [UserFlag!]!
}

type Variable implements Node {
	createdAt: DateTime!
	environment: Environment!
	environmentId: String
	id: ID!
	name: String!
	plugin: Plugin!
	pluginId: String
	service: Service!
	serviceId: String
	updatedAt: DateTime!
}

input VariableCollectionUpsertInput {
	environmentId: String!
	projectId: String!
	# When set to true, removes all existing variables before upserting the new collection.
	replace: Boolean = false
	serviceId: String
	variables: ServiceVariables!
}

input VariableDeleteInput {
	environmentId: String!
	name: String!
	projectId: String!
	serviceId: String
}

input VariableUpsertInput {
	environmentId: String!
	name: String!
	projectId: String!
	serviceId: String
	value: String!
}
